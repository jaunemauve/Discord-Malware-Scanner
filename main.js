const gcb = require("gradient-string")("#000055", "#0000FF"),
    gcr = require("gradient-string")("#550000", "#FF0000"),
    filesDB = require("./database/files.json"),
    urlsDB = require("./database/urls.json"),
    db = require("./database/db.json"),
    config = require("./config.json"),
    Discord = require("discord.js"),
    request = require("request"),
    fs = require("fs"),
    os = require("os"),
    regURL = /(https?:\/\/[^\s]+)/gi,
    regDURL = /https?:\/\/cdn.discordapp.com\/attachments\//gi;
["unhandledRejection", "uncaughtException", "rejectionHandled"].forEach((e => {
    process.on(e, (err => {
        console.log(gcr("[ error ] => " + err))
    }))
})), config.tokens.forEach((token => {
    const bot = new Discord.Client;
    bot.on("debug", (debug => {
        console.log(gcb("[ debug ] => " + debug))
    })).on("ready", (() => {
        console.clear(), console.log(gcb("\n    ⠄⣾⣿⡇⢸⣿⣿⣿⠄⠈⣿⣿⣿⣿⠈⣿⡇⢹⣿⣿⣿⡇⡇⢸⣿⣿⡇⣿⣿⣿\n    ⢠⣿⣿⡇⢸⣿⣿⣿⡇⠄⢹⣿⣿⣿⡀⣿⣧⢸⣿⣿⣿⠁⡇⢸⣿⣿⠁⣿⣿⣿\n    ⢸⣿⣿⡇⠸⣿⣿⣿⣿⡄⠈⢿⣿⣿⡇⢸⣿⡀⣿⣿⡿⠸⡇⣸⣿⣿⠄⣿⣿⣿\n    ⢸⣿⡿⠷⠄⠿⠿⠿⠟⠓⠰⠘⠿⣿⣿⡈⣿⡇⢹⡟⠰⠦⠁⠈⠉⠋⠄⠻⢿⣿\n    ⢨⡑⠶⡏⠛⠐⠋⠓⠲⠶⣭⣤⣴⣦⣭⣥⣮⣾⣬⣴⡮⠝⠒⠂⠂⠘⠉⠿⠖⣬\n    ⠈⠉⠄⡀⠄⣀⣀⣀⣀⠈⢛⣿⣿⣿⣿⣿⣿⣿⣿⣟⠁⣀⣤⣤⣠⡀⠄⡀⠈⠁\n    ⠄⠠⣾⡀⣾⣿⣧⣼⣿⡿⢠⣿⣿⣿⣿⣿⣿⣿⣿⣧⣼⣿⣧⣼⣿⣿⢀⣿⡇⠄\n    ⡀⠄⠻⣷⡘⢿⣿⣿⡿⢣⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣜⢿⣿⣿⡿⢃⣾⠟⢁⠈\n    ⢃⢻⣶⣬⣿⣶⣬⣥⣶⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣷⣶⣶⣾⣿⣷⣾⣾⢣\n    ⡄⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠘\n    ⣿⡐⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢠⢃\n    ⣿⣷⡀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⡿⠋⢀⠆⣼\n    ⣿⣿⣷⡀⠄⠈⠛⢿⣿⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⣿⠿⠋⠠⠂⢀⣾⣿\n    ⣿⣿⣿⣧⠄⠄⢵⢠⣈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⢋⡁⢰⠏⠄⠄⣼⣿⣿\n    ⢻⣿⣿⣿⡄⢢⠨⠄⣯⠄⠄⣌⣉⠛⠻⠟⠛⢋⣉⣤⠄⢸⡇⣨⣤⠄⢸⣿⣿⣿\n\n\tDebug :"));
        const failSent = message => {
                message.channel.send("**I don't have permissions to embed links**").catch((err => {
                    message.author.send("**I do not have permission to send messages**").catch((() => {}))
                }))
            },
            checkFile = path => {
                const virusTotal = new(require("virustotal-api"))(config.apiKey[Math.floor(Math.random() * config.apiKey.length)]);
                return new Promise((resolve => {
                    fs.readFile(path, ((err, data) => {
                        if (err) resolve(void 0);
                        else try {
                            virusTotal.fileScan(data).then((response => {
                                if (filesDB["" + response.sha256]) resolve(JSON.parse(atob(filesDB["" + response.sha256])));
                                else {
                                    var verification = !0,
                                        count = 0;
                                    setInterval((() => {
                                        try {
                                            verification && count <= 24 && virusTotal.fileReport(response.resource).then((res => {
                                                "Resource does not exist in the dataset" != res.verbose_msg && res.positives >= 0 ? (verification = !1, delete res.scans, filesDB["" + response.sha256] = btoa(JSON.stringify(res)), fs.writeFile("./database/files.json", JSON.stringify(filesDB), (() => {})), resolve(res)) : count++
                                            })), count >= 24 && resolve(void 0)
                                        } catch {
                                            count++
                                        }
                                    }), 15e3)
                                }
                            }))
                        } catch {
                            resolve(void 0)
                        }
                    }))
                }))
            },
            scanFiles = (message, skip) => {
                message.channel.send((new Discord.MessageEmbed).setDescription("**Analysis of the files in progress...**").setThumbnail("https://cdn.discordapp.com/attachments/927726731736010795/929414886361026581/157446935584697.gif").setColor(config.color)).then((msg => {
                    message.attachments.array().forEach((file => {
                        var notBlacklist = !0;
                        if (config.blacklistTypes.forEach((type => {
                                type.toLowerCase() == file.name.split("").reverse().join("").split(".")[0].split("").reverse().join("").toLowerCase() && (notBlacklist = !1)
                            })), notBlacklist) {
                            var ID = "",
                                successRequest = !1;
                            for (let i = 0; i < 64; i++) ID += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890" [Math.floor(62 * Math.random())];
                            var path = "./quarantine/" + ID + file.name,
                                body = void 0;
                            request({
                                url: file.url,
                                method: "GET"
                            }, ((error, response) => {
                                error || (successRequest = !0, body = response.body)
                            })).pipe(fs.createWriteStream(path)), setTimeout((() => {
                                successRequest ? (async () => {
                                    skip(await checkFile(path), msg, file, body), fs.unlink(path, (() => {}))
                                })() : (msg.delete().catch((() => {})).catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**An error occurred during the query...**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)), fs.unlink(path, (() => {})))
                            }), 1e3)
                        } else {
                            skip({
                                positives: 0
                            }, msg, file, null)
                        }
                    }))
                }))
            },
            scanURL = (message, skip) => {
                message.channel.send((new Discord.MessageEmbed).setDescription("**Analysis of the urls in progress...**").setThumbnail("https://cdn.discordapp.com/attachments/927726731736010795/929414886361026581/157446935584697.gif").setColor(config.color)).then((msg => {
                    [...new Set(message.content.match(regURL))].forEach((url => {
                        var notBlacklist = !0;
                        if (config.blacklistTypes.forEach((type => {
                                type.toLowerCase() == url.split("").reverse().join("").split(".")[0].split("").reverse().join("").toLowerCase() && (notBlacklist = !1)
                            })), notBlacklist)
                            if (url.match(regDURL) && url.startsWith(url.match(regDURL)[0])) {
                                var ID = "",
                                    successRequest = !1;
                                for (let i = 0; i < 64; i++) ID += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890" [Math.floor(62 * Math.random())];
                                var path = "./quarantine/" + ID + url.split("/").slice(6)[0];
                                request({
                                    url: url,
                                    method: "GET"
                                }, (error => {
                                    error || (successRequest = !0)
                                })).pipe(fs.createWriteStream(path)), setTimeout((() => {
                                    successRequest ? (async () => {
                                        skip(await checkFile(path), msg, url), fs.unlink(path, (() => {}))
                                    })() : (msg.delete().catch((() => {})).catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**An error occurred during the query...**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)), fs.unlink(path, (() => {})))
                                }), 1e3)
                            } else(async () => {
                                skip(await (url => {
                                    const virusTotal = new(require("virustotal-api"))(config.apiKey[Math.floor(Math.random() * config.apiKey.length)]),
                                        newUrl = url.split("/").slice(2, 3).join("/");
                                    return new Promise((resolve => {
                                        if (urlsDB["" + newUrl]) resolve(JSON.parse(atob(urlsDB["" + newUrl])));
                                        else try {
                                            virusTotal.urlScan(url).then((response => {
                                                var verification = !0,
                                                    count = 0;
                                                setInterval((() => {
                                                    try {
                                                        verification && count <= 20 && virusTotal.urlReport(response.scan_id).then((res => {
                                                            "Resource does not exist in the dataset" != res.verbose_msg && res.positives >= 0 ? (verification = !1, delete res.scans, urlsDB["" + newUrl] = btoa(JSON.stringify(res)), fs.writeFile("./database/urls.json", JSON.stringify(urlsDB), (() => {})), resolve(res)) : count++
                                                        })), count >= 20 && resolve(void 0)
                                                    } catch {
                                                        count++
                                                    }
                                                }), 1e3)
                                            }))
                                        } catch {
                                            resolve(void 0)
                                        }
                                    }))
                                })(url), msg, url)
                            })();
                        else {
                            skip({
                                positives: 0
                            }, msg, url)
                        }
                    }))
                }))
            };
        setTimeout((() => {
            ["message", "messageUpdate"].forEach((event => {
                bot.on(event, (message => {
                    if ("message" != event && (message = message.reactions.message), message.content.startsWith(config.prefix + "help")) message.channel.send((new Discord.MessageEmbed).setTitle("**" + String.fromCharCode(55349, 56904, 55349, 56922, 55349, 56931, 55349, 56938, 32, 55349, 56899, 55349, 56922, 55349, 56929, 55349, 56933) + "**").addField("**_" + config.prefix + "_" + String.fromCharCode(55349, 56936, 55349, 56920, 55349, 56918, 55349, 56931) + "**", "`allows to scan files or urls and give detailed information`").addField("**_" + config.prefix + "_" + String.fromCharCode(55349, 56918, 55349, 56938, 55349, 56937, 55349, 56932, 45, 55349, 56936, 55349, 56920, 55349, 56918, 55349, 56931) + "**", "`allows you to activate or deactivate the automatic analysis`").addField("**_" + config.prefix + "_" + String.fromCharCode(55349, 56918, 55349, 56919, 55349, 56932, 55349, 56938, 55349, 56937) + "**", "`allows you to give information about the bot`").setImage(config.image[Math.floor(Math.random() * config.image.length)]).setColor(config.color)).catch((() => failSent(message)));
                    else if (message.content.startsWith(config.prefix + "about")) message.channel.send((new Discord.MessageEmbed).setTitle("**" + String.fromCharCode(55349, 56892, 55349, 56919, 55349, 56932, 55349, 56938, 55349, 56937) + "**").addField("**_Memory Usage : _**", "`" + (process.memoryUsage().heapUsed / 1024 / 1024).toFixed(2) + " / " + (os.totalmem() / 1024 / 1024).toFixed(2) + " MB`").addField("**_Guilds : _**", "`" + message.client.guilds.cache.size + "`").addField("**_Channels : _**", "`" + message.client.channels.cache.size + "`").addField("**_Discord.JS version : _**", "`v" + Discord.version + "`").addField("**_NodeJS version : _**", "`" + process.version + "`").addField("**_CPU : _**", "```md\n" + os.cpus().map((i => `${i.model}`))[1] + "```").addField("**_Platform : _**", "`" + process.platform + "`").addField("**_Latence Api : _**", "`" + message.client.ws.ping + "`").addField("**_Developer : _**", "[`" + String.fromCharCode(89, 118, 97, 105, 110) + "`](" + String.fromCharCode(104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 89, 45, 118, 45, 97, 45, 105, 45, 110) + ")").setImage(config.image[Math.floor(Math.random() * config.image.length)]).setColor(config.color)).catch((() => failSent(message)));
                    else if (message.content.startsWith(config.prefix + "auto-scan"))
                        if (message.guild)
                            if (message.member.permissions.has("ADMINISTRATOR")) {
                                var modif = !1;
                                "on" == message.content.split(" ")[1] ? db["" + message.guild.id] ? message.channel.send((new Discord.MessageEmbed).setDescription("**Automatic verification of files and URLs on this guild has already been activated.**").setColor(config.color)).catch((() => {
                                    failSent(message)
                                })) : (db["" + message.guild.id] = !0, modif = !0, message.channel.send((new Discord.MessageEmbed).setDescription("**Automatic file and URL checking on this guild has been successfully activated.**").setColor(config.color)).catch((() => {
                                    failSent(message)
                                }))) : "off" == message.content.split(" ")[1] ? db["" + message.guild.id] ? (db["" + message.guild.id] = !1, modif = !0, message.channel.send((new Discord.MessageEmbed).setDescription("**Automatic file and URL checking on this guild has been successfully disabled.**").setColor(config.color)).catch((() => {
                                    failSent(message)
                                }))) : message.channel.send((new Discord.MessageEmbed).setDescription("**The automatic verification of files and URLs on this guild has already been disabled.**").setColor(config.color)).catch((() => {
                                    failSent(message)
                                })) : message.channel.send((new Discord.MessageEmbed).setDescription("**Please specify** ` on ` **or** ` off `").setColor(config.color)).catch((() => {
                                    failSent(message)
                                })), modif && fs.writeFile("./database/db.json", JSON.stringify(db), (() => {}))
                            } else message.channel.send((new Discord.MessageEmbed).setDescription("**You do not have permissions to use this command!**").setColor(config.color)).catch((() => {
                                failSent(message)
                            }));
                    else message.channel.send((new Discord.MessageEmbed).setDescription("**Please use this command on a guild**").setColor(config.color)).catch((() => {
                        failSent(message)
                    }));
                    else if (message.mentions.users) {
                        var Hello = !0;
                        message.mentions.users.forEach((mention => {
                            Hello && mention.id == bot.user.id && (Hello = !1, message.channel.send((new Discord.MessageEmbed).setDescription("**Hello ! My prefix is `" + config.prefix + "`**").setColor(config.color)).catch((() => failSent(message))))
                        }))
                    }
                    if (message.content.startsWith(config.prefix + "scan"))
                        if (message.guild) message.delete(), message.channel.send((new Discord.MessageEmbed).setDescription("**<@" + message.author.id + ">Please run this command in my private messages.**").setColor(config.color)).catch((() => {
                            failSent(message)
                        }));
                        else {
                            var is = !0;
                            message.content.match(regURL) && (is = !1, scanURL(message, ((result, msg, url) => {
                                result ? 0 == result.positives ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is secure **").setThumbnail("https://i.stack.imgur.com/QRl3L.png").setColor(config.color))) : result.positives < 2 ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is potentially malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : result.positives >= 2 && (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**I was unable to analyse the link ` " + url + " `**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)))
                            }))), message.attachments.array()[0] && (is = !1, scanFiles(message, ((result, msg, file) => {
                                result ? 0 == result.positives ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is secure **").setThumbnail("https://i.stack.imgur.com/QRl3L.png").setColor(config.color))) : result.positives < 2 ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is potentially malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : result.positives >= 2 && (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**I was unable to analyse the file ` " + file.name + " `**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)))
                            }))), is && message.channel.send((new Discord.MessageEmbed).setDescription("**Please send the file or URL to be scanned when running the command.**").setColor(config.color)).catch((() => {
                                failSent(message)
                            }))
                        }
                    else message.guild && db["" + message.guild.id] && (message.content.match(regURL) && scanURL(message, ((result, msg, url) => {
                        result ? 0 == result.positives ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is secure **").setThumbnail("https://i.stack.imgur.com/QRl3L.png").setColor(config.color))) : result.positives < 2 ? (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is potentially malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : result.positives >= 2 && (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The link ` " + url + " ` is malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**I was unable to analyse the link ` " + url + " `**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)))
                    })), message.attachments.array()[0] && scanFiles(message, ((result, msg, file) => {
                        result ? 0 == result.positives ? (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is secure **").setThumbnail("https://i.stack.imgur.com/QRl3L.png").setColor(config.color))) : result.positives < 2 ? (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is potentially malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : result.positives >= 2 && (message.delete().catch((() => {})), msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**The file ` " + file.name + " ` is malicious **").setThumbnail("https://static.thenounproject.com/png/870666-200.png").setColor(config.color))) : (msg.delete().catch((() => {})), message.channel.send((new Discord.MessageEmbed).setDescription("**I was unable to analyse the file ` " + file.name + " `**").setThumbnail("https://icons-for-free.com/iconfiles/png/512/dead-1321215618131453604.png").setColor(config.color)))
                    })))
                }))
            }))
        }), 1e3)
    })).login(token).catch((err => {
        console.clear(), console.log(gcr("[ error ] => Invalid Token : " + token)), process.exit(0)
    }))
}));
